package com.tqs1.tqs1;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.web.client.RestTemplateBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;

@CrossOrigin
@Controller    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /weather (after Application path)
public class WeatherController {

    private static final Logger log = LoggerFactory.getLogger(WeatherController.class);

    public RestTemplate restTemplate = new RestTemplate();

    @Autowired // This means to get the bean called WeatherRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private WeatherRepository repository;

    @Autowired
    private DataRepository repository2;

    @Autowired
    private DailyRepository repository3;


    @GetMapping(path="/all")
    public @ResponseBody Iterable<Weather> getAllWeather() {
        // This returns a JSON or XML with the weathers
        return repository.findAll();
    }


    @GetMapping(path="/weather")
    public @ResponseBody Weather getWeather(@RequestParam double latitude, @RequestParam double longitude) {

        if (repository.existsByLatitudeAndLongitude(latitude, longitude)) {

            Weather weather = repository.findByLatitudeAndLongitude(latitude,longitude);

            log.info(weather.toString());

            return weather;

        } else {

            Weather weather = restTemplate.getForObject(
                    "https://api.darksky.net/forecast/28a3c3fed03114a110538615e5262cbb/" + latitude + "," + longitude, Weather.class);
            for (Data d : weather.getDaily().getData())
                repository2.save(d);
            repository3.save(weather.getDaily());
            repository.save(weather);

            log.info(weather.toString());

            return weather;

        }

    }

}